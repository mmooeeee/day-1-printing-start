programming_dictionary = {"Bug": "An error in a program that prevents the program from running as expected.", "Function": "A piece of code that you can easily call over and over again."}

#retrieving item from dictionary
#print(programming_dictionary["Bug"])

#adding new item dictionary
programming_dictionary["Loop"] = "The action of doing something over and over again."

#print(programming_dictionary)

#create empty dictionary
empty_dictionary = {}

#wipe an existing dictionary
# programming_dictionary = {}
# print (programming_dictionary)

#edit an item in a dictionary
programming_dictionary["Bug"]="a moth in your computer"
#print(programming_dictionary)

#Loop troughh a dictionary
for key in programming_dictionary:
  print(key)
  print(programming_dictionary[key])
------------------------------------------------------
student_scores = {
  "Harry": 81,
  "Ron": 78,
  "Hermione": 99, 
  "Draco": 74,
  "Neville": 62,
}
# ðŸš¨ Don't change the code above ðŸ‘†

#TODO-1: Create an empty dictionary called student_grades.
student_grades = {}

#TODO-2: Write your code below to add the grades to student_grades.ðŸ‘‡
for student in student_scores:
  score = student_scores [student]
  if score > 90:
    student_grades[student] = "Outstanding"
  elif score > 80:
    student_grades[student] = "Exceeds Expectations"
  elif score > 70:
    student_grades[student] = "Acceptable"
  else:
    student_grades[student] = "Fail"
     

# ðŸš¨ Don't change the code below ðŸ‘‡
print(student_grades)
---------------------------------------------------------------------------------
##Python Dictionaries

programming_dictionary = {
  "Bug": "An error in a program that prevents the program from running as expected.", 
  "Function": "A piece of code that you can easily call over and over again.",
}

#Retrieving items from dictionary.
# print(programming_dictionary["Function"])

#Adding new items to dictionary.
programming_dictionary["Loop"] = "The action of doing something over and over again."

#Create an empty dictionary.
empty_dictionary = {}

#Wipe an existing dictionary
# programming_dictionary = {}
# print(programming_dictionary)

#Edit an item in a dictionary
programming_dictionary["Bug"] = "A moth in your computer."
# print(programming_dictionary)

#Loop through a dictionary
# for key in programming_dictionary:
#   print(key)
#   print(programming_dictionary[key])

#######################################

#Nesting 
capitals = {
  "France": "Paris",
  "Germany": "Berlin",
}

#Nesting a List in a Dictionary

travel_log = {
  "France": ["Paris", "Lille", "Dijon"],
  "Germany": ["Berlin", "Hamburg", "Stuttgart"],
}

#Nesting Dictionary in a Dictionary

travel_log = {
  "France": {"cities_visited": ["Paris", "Lille", "Dijon"], "total_visits": 12},
  "Germany": {"cities_visited": ["Berlin", "Hamburg", "Stuttgart"], "total_visits": 5},
}

#Nesting Dictionaries in Lists

travel_log = [
{
  "country": "France", 
  "cities_visited": ["Paris", "Lille", "Dijon"], 
  "total_visits": 12,
},
{
  "country": "Germany",
  "cities_visited": ["Berlin", "Hamburg", "Stuttgart"],
  "total_visits": 5,
},
]
---------------------------------------------------------------------------------------------------
#blind auction
from replit import clear
#HINT: You can call clear() to clear the output in the console.

from art import logo

print(logo)


bids = {}
bidding_finished = False

def find_highest_bidder(bidding_record):
  highest_bid = 0
  winner = ""
  for bidder in bidding_record:
    bid_amount = bidding_record[bidder]
    if bid_amount > highest_bid:
      highest_bid = bid_amount
      winner = bidder
  print (f"The winner is {winner} with a bid of ${highest_bid}")


while not bidding_finished:
  name = input("what is your name?: ")
  price = int(input("what us your bid?: $"))
  bids [name] = price
  should_continue = input("Are there any bidders? type 'yes' or 'no'")
  if should_continue == 'no':
    bidding_finished = True
    find_highest_bidder(bids)
  elif should_continue == 'yes':
    clear()

